// fileListSlice.ts
import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';
import axios from 'axios';

// Define the entity adapter
const fileListAdapter = createEntityAdapter<FileListItem>();

// Define the initial state using the adapter
const initialState = fileListAdapter.getInitialState({
  status: 'idle',
  error: null,
});

// Define the asynchronous thunk for fetching data from the server
const fetchFileList = createAsyncThunk('fileList/fetchFileList', async () => {
  const response = await axios.get('/api/fileList'); // Replace with your actual API endpoint
  return response.data;
});

// Create the file list slice
const fileListSlice = createSlice({
  name: 'fileList',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchFileList.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchFileList.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // Use the adapter to update the state with normalized data
        fileListAdapter.setAll(state, action.payload);
      })
      .addCase(fetchFileList.rejected, (state:any, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

// Export the file list selectors generated by the adapter
export const {
  selectAll: selectAllFiles,
  selectById: selectFileById,
} = fileListAdapter.getSelectors((state: any) => state.fileList); //RootState

// Export the async thunk for external use
export { fetchFileList };

// Export the reducer
export default fileListSlice.reducer;